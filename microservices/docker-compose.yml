version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    restart: on-failure
    ports:
      - 8080:8080
    networks:
      - backend
    volumes:
      - ./Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf

  auth-service:
    image: auth-service:compose_build
    restart: on-failure
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${AUTH_SERVICE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      PSQL_USER: ${PSQL_USER}
      PSQL_PASS: ${PSQL_PASS}
      PSQL_DBNAME: ${PSQL_DBNAME}
      PSQL_PORT: ${PSQL_PORT}
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - postgres

  post-service:
    image: post-service:compose_build
    restart: on-failure
    build:
      context: ./post-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${POST_SERVICE_PORT}
      POST_SERVICE_DOMAIN: ${POST_SERVICE_DOMAIN}
      PSQL_USER: ${PSQL_USER}
      PSQL_PASS: ${PSQL_PASS}
      PSQL_DBNAME: ${PSQL_DBNAME}
      PSQL_PORT: ${PSQL_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - mongo-db

  postgres:
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_DB: ${PSQL_DBNAME}
      POSTGRES_PASSWORD: ${PSQL_PASS}
    ports:
      - 5432:5432
    volumes: 
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    networks:
      - backend

  user-service:
    image: user-service:compose_build
    restart: on-failure
    build:
      context: ./user-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${USER_SERVICE_PORT}
      AUTH_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      PSQL_USER: ${PSQL_USER}
      PSQL_PASS: ${PSQL_PASS}
      PSQL_DBNAME: ${PSQL_DBNAME}
      PSQL_PORT: ${PSQL_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - postgres

  followers-service:
    image: followers-service:compose_build
    restart: on-failure
    build:
      context: ./followers-service
      dockerfile: Dockerfile
    environment:
      PORT: ${FOLLOWERS_SERVICE_PORT}
      FOLLOWERS_SERVICE_DOMAIN: ${FOLLOWERS_SERVICE_DOMAIN}
    networks:
      - backend
#    depends_on:
#      - neo4j


  mongo-db:
    image: mongo
    restart: on-failure
    ports:
      - 27017:27017
    volumes:
      - /data/db:/data/db
    networks:
      - backend


#  neo4j:
#    image: neo4j:latest
#    container_name: 'neo4j-db'
#    volumes:
#      - '$HOME/neo4j/data:/data'
#      - '$HOME/neo4j/conf/:/conf/'
#    environment:
#      NEO4J_USER: ${NEO4J_USER}
#      NEO4J_PASS: ${NEO4J_PASS}
#      NEO4J_DBNAME: ${NEO4J_DBNAME}
#      NEO4J_PORT: ${NEO4J_PORT}
#    ports:
#      - 7474:7474
#      - 7687:7687
#    restart: on-failure
#    networks:
#      - backend
#    command: neo4j

networks:
  backend:
    name: nistagram-backend
    driver: bridge